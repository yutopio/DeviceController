%{
module internal Parser

open Error
open Types
%}

%token <string> IDENT
%token <string> STR
%token <int> INT
%token <single> FLOAT
%token PROC TIME
%token DEVICE
%token LOAD WITH
%token FROM FOR TO
%token EQUAL
%token PLUS
%token LPAREN RPAREN
%token LCBRACK RCBRACK
%token COMMA
%token COLON SEMICOLON
%token EOF

%start compilationUnit
%type <invokable list * (string * (string * string) list) list> compilationUnit

%%

compilationUnit:
    | EOF                       { [], [] }
    | procDef compilationUnit   { let a, b = $2 in $1 :: a, b }
    | devDef compilationUnit    { let a, b = $2 in $1 :: a, b }
    | loadSpec compilationUnit  { let a, b = $2 in a, $1 :: b }
;

loadSpec:
    | LOAD STR SEMICOLON                { $2, [] }
    | LOAD STR WITH subSpecs SEMICOLON  { $2, $4 }
;

subSpecs:
    | subSpec                   { [$1] }
    | subSpec COMMA subSpecs    { $1 :: $3 }
;

subSpec:
    | LPAREN IDENT COMMA IDENT RPAREN   { $2, $4 }
;

procDef:
    | PROC IDENT paramDef procBody  { new procRaw($2, $3, $4) :> invokable }
;

paramDef:
    | LPAREN RPAREN             { [] }
    | LPAREN paramList RPAREN   { $2 }
;

paramList:
    | IDENT                 { [$1] }
    | IDENT COMMA paramList { $1 :: $3 }
;

procBody:
    | timeline                      { [$1] }
    | procInvoke                    { [$1] }
    | LCBRACK RCBRACK               { [] }
    | LCBRACK procBodyBlock RCBRACK { $2 }
;

procBodyBlock:
    | timeline                  { [$1] }
    | procInvoke                { [$1] }
    | timeline procBodyBlock    { $1 :: $2 }
    | procInvoke procBodyBlock  { $1 :: $2 }
;

timeline:
    | TIME command                      { R_Time([$2]) }
    | TIME LCBRACK RCBRACK              { R_Time([]) }
    | TIME LCBRACK commandList RCBRACK  { R_Time($3) }
;

commandList:
    | command commandList   { $1 :: $2 }
    | command               { [$1] }
;

command:
    | IDENT arguments SEMICOLON             { R_Command($1, $2, None) }
    | IDENT arguments timeSpec SEMICOLON    { R_Command($1, $2, Some $3) }
;

timeSpec:
    | FROM INT                  { (Some $2, To $2) }
    | FOR INT                   { (None, For $2) }
    | TO INT                    { (None, To $2) }
    | FROM INT FOR INT          { (Some $2, For $4) }
    | FROM INT TO INT           { (Some $2, To $4) }
    | FROM INT FOR INT INT INT  { notBothForTo () }
    | FROM INT TO INT FOR INT   { notBothForTo () }
;

procInvoke:
    | IDENT arguments SEMICOLON { R_Invoke($1, $2) }
;

arguments:
    | LPAREN RPAREN         { [] }
    | LPAREN argList RPAREN { $2 }
;

argList:
    | expr COMMA argList    { $1 :: $3 }
    | expr                  { [$1] }
;

expr:
    | literal           { Const($1) }
    | expr PLUS expr    { Add($1, $3) }
;

literal:
    | IDENT     { Value $1 }
    | INT       { Int $1 }
    | STR       { String $1 }
    | FLOAT     { Float $1 }
;

devDef:
    | DEVICE IDENT SEMICOLON            { new device($2, null, []) :> invokable }
    | DEVICE IDENT COLON IDENT devBody  { new device($2, $4, $5) :> invokable }
;

devBody:
    | LCBRACK RCBRACK           { [] }
    | LCBRACK devSpecs RCBRACK  { $2 }
;

devSpecs:
    | devSpec                   { [$1] }
    | devSpec COMMA devSpecs    { $1 :: $3 }
;

devSpec:
    | IDENT EQUAL literal       { ($1, $3) }
;
