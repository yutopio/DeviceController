%{
module Parser

open Types
%}

%token <string> IDENT
%token <string> STR
%token <int> INT
%token <single> FLOAT
%token PROC TIME
%token FROM FOR TO
%token PLUS
%token LPAREN RPAREN
%token LCBRACK RCBRACK
%token COMMA
%token SEMICOLON
%token EOF

%start compilationUnit
%type <Types.proc list> compilationUnit

%%

compilationUnit:
    | EOF       { [] }
    | procs EOF { $1  }
;

procs:
    | procs procDef { $1 @ [$2] }
    | procDef       { [$1] }
;

procDef:
    | PROC IDENT paramDef procBody  { ProcDef($2, $3, $4) }
;

paramDef:
    | LPAREN RPAREN             { [] }
    | LPAREN paramList RPAREN   { $2 }
;

paramList:
    | IDENT                 { [$1] }
    | paramList COMMA IDENT { $1 @ [$3] }
;

procBody:
    | timeline                      { [$1] }
    | procInvoke                    { [$1] }
    | LCBRACK RCBRACK               { [] }
    | LCBRACK procBodyBlock RCBRACK { $2 }
;

procBodyBlock:
    | timeline                  { [$1] }
    | procInvoke                { [$1] }
    | procBodyBlock timeline    { $1 @ [$2] }
    | procBodyBlock procInvoke  { $1 @ [$2] }
;

timeline:
    | TIME command                      { Time([$2]) }
    | TIME LCBRACK RCBRACK              { Time([]) }
    | TIME LCBRACK commandList RCBRACK  { Time($3) }
;

commandList:
    | command commandList   { $1 :: $2 }
    | command               { [$1] }
;

command:
    | IDENT arguments SEMICOLON             { Command($1, $2, None) }
    | IDENT arguments timeSpec SEMICOLON    { Command($1, $2, Some $3) }
;

timeSpec:
    | FROM FLOAT                    { (Some $2, To $2) }
    | FOR FLOAT                     { (None, For $2) }
    | TO FLOAT                      { (None, To $2) }
    | FROM FLOAT FOR FLOAT          { (Some $2, For $4) }
    | FROM FLOAT TO FLOAT           { (Some $2, To $4) }
    | FROM FLOAT FOR FLOAT TO FLOAT { raise (new System.ApplicationException("Cannot specify both 'for' and 'to' time specification.")) }
    | FROM FLOAT TO FLOAT FOR FLOAT { raise (new System.ApplicationException("Cannot specify both 'for' and 'to' time specification.")) }
;

procInvoke:
    | IDENT arguments SEMICOLON { Proc($1, $2) }
;

arguments:
    | LPAREN RPAREN         { [] }
    | LPAREN argList RPAREN { $2 }
;

argList:
    | expr COMMA argList    { $1 :: $3 }
    | expr                  { [$1] }
;

expr:
    | literal           { Const($1) }
    | expr PLUS expr    { Add($1, $3) }
;

literal:
    | IDENT     { Value $1 }
    | STR       { String $1 }
    | FLOAT     { Float $1 }
;
