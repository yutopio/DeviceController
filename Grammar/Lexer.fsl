{
module Lexer

open System
open System.Collections.Generic
open System.Linq
open System.Text
open Parser

(*** Some helper functions ***)
let lexeme (lexbuf:Lexing.LexBuffer<_>) = new string(lexbuf.Lexeme)
let spos (lexbuf:Lexing.LexBuffer<_>) = lexbuf.StartPos.AbsoluteOffset
let epos (lexbuf:Lexing.LexBuffer<_>) = lexbuf.EndPos.AbsoluteOffset

(*** Error definitions ***)
let error msg = raise (new System.ApplicationException(msg))
let unrecToken token = error ("Unrecognized token: " + token)
let nonTermCom () = error "End-of-file found, '*/' expected"
let brStr () = error "Newline in string literal"
let eofStr () = error "Unterminated string literal"
}

let br = ['\r' '\n']
let sp = [' ' '\t']
let digit = ['0'-'9']
let letter = ['a'-'z' 'A'-'Z']
let nonEscChars = [^ '"' '\'' '\\' '0' 'n' 'r' 't']
let identifierStartCharacter = letter | '_'
let identifierPartCharacter = letter | digit | '_'
let ident = identifierStartCharacter identifierPartCharacter*
let floatp = digit+ '.' digit*
let floate = digit+ ('.' digit* )? ('e'| 'E') ['+' '-']? digit+
let float = floatp | floate
let regularStrChar = [^ '\"' '\\' '\r' '\n']

rule token = parse
    | sp+               { token lexbuf }
    | br+               { token lexbuf }
    | "//"              { lineComment lexbuf }
    | "/*"              { blockComment lexbuf }
    | "procedure"       { PROC }
    | "timeline"        { TIME }
    | "from"            { FROM }
    | "for"             { FOR }
    | "to"              { TO }
    | "device"          { DEVICE }
    | "load"            { LOAD }
    | "with"            { WITH }
    | '='               { EQUAL }
    | '+'               { PLUS }
    | '('               { LPAREN }
    | ')'               { RPAREN }
    | '{'               { LCBRACK }
    | '}'               { RCBRACK }
    | ','               { COMMA }
    | ':'               { COLON }
    | ';'               { SEMICOLON }
    | ident             { IDENT(lexeme lexbuf) }
    | digit+            { INT(Int32.Parse(lexeme lexbuf)) }
    | float             { FLOAT(Single.Parse(lexeme lexbuf)) }
    | '\"'              { STR(regularString "" lexbuf) }
    | "@\""             { STR(verbatimString "" lexbuf) }
    | eof               { EOF }
    | _                 { unrecToken (lexeme lexbuf) }
and lineComment = parse
    | br                { token lexbuf }
    | eof               { EOF }
    | _                 { lineComment lexbuf }
and blockComment = parse
    | "*/"              { token lexbuf }
    | [^'*''/']+        { blockComment lexbuf }
    | '*'+[^'*''/']     { blockComment lexbuf }
    | eof               { nonTermCom () }
    | _                 { blockComment lexbuf }
and regularString str = parse
    | '\"'              { str }
    | "\\\""            { regularString (str + "\"") lexbuf }
    | "\\'"             { regularString (str + "\'") lexbuf }
    | "\\\\"            { regularString (str + "\\") lexbuf }
    | "\\0"             { regularString (str + "\000") lexbuf }
    | "\\n"             { regularString (str + "\n") lexbuf }
    | "\\r"             { regularString (str + "\r") lexbuf }
    | "\\t"             { regularString (str + "\t") lexbuf }
    | '\\' nonEscChars  { regularString (str + "\t") lexbuf }
    | br                { brStr () }
    | regularStrChar+   { regularString (str + (lexeme lexbuf)) lexbuf }
    | eof               { eofStr () }
and verbatimString str = parse
    | [^'"']+           { verbatimString (str + (lexeme lexbuf)) lexbuf }
    | "\"\""            { verbatimString (str + "\"") lexbuf }
    | '\"'              { str }
    | eof               { eofStr () }
